!!(*
#
# A simplified version of this file, designed for the UML test
# machine.
#
# single-vhost.conf.ugly:
# Template file for a single virtual host.
# 
# deploy-vhost uses this to make files in /etc/apache/virtualhosts.d
#
# $Id: single-vhost.conf.ugly,v 1.109 2009-11-04 16:16:33 matthew Exp $
#
*)!!

# !!(*= DONOTEDIT *)!!

!!(*
    my $first_redirect = shift @$redirects;
    if ($first_redirect) {
        print "<VirtualHost *:80>\n";
        print "    ServerName $first_redirect\n";
        foreach my $redirect (@$redirects) { 
            print "    ServerAlias $redirect\n";
        }
        print "    RedirectPermanent / http://$vhost/\n";
        print "</VirtualHost>\n";
    }
*)!!

!!(*
    my $port = 80;
    if ($https) {
        print "SSLCertificateFile /etc/apache2/ssl.crt/$vhost.crt\n";
        print "SSLCertificateKeyFile /etc/apache2/ssl.key/$vhost.key\n";
        $port = 443;
    }
*)!!

!!(*
my $cgihandler;
if ($fastcgi) {
    $cgihandler = "AddHandler fastcgi-script .cgi";
} else {
    $cgihandler = "AddHandler cgi-script .cgi";
}
*)!!

<VirtualHost *:!!(*= $port *)!!>

    ##########################################################################
    # Generic stanzas, configured by vhosts.pl options
    
    ServerName !!(*= $vhost *)!!
    !!(* foreach my $alias (@$aliases) { *)!!
        ServerAlias !!(*= $alias *)!! 
        !!(* if ($wildcard_vhost) { *)!!
            ServerAlias *.!!(*= $alias *)!! 
        !!(* } *)!!
    !!(* } *)!!

    !!(* if ($wildcard_vhost) { 
        my $wildcard_string = '*.' . $vhost;
        $wildcard_string =~ s/\*\.www\./*./;
        print "ServerAlias $wildcard_string"; 
    } *)!!

    !!(* if ($https) {*)!!
    SSLEngine On
    !!(* } *)!!

    !!(* if ($site eq "petitions" && !$staging) { *)!!
    ServerAdmin team@petitions.pm.gov.uk
    !!(* } else { *)!!
    ServerAdmin webmaster@!!(*= $vhost_rest *)!!
    !!(* } *)!!

    DocumentRoot /data/vhost/!!(*= $vhost *)!!/docs
    !!(* if ("$debian_version" ne "sarge")  {*)!!
    SuExecUserGroup !!(*= $user *)!! !!(*= $group *)!!
    !!(* } else { *)!!
    User !!(*= $user *)!!
    Group !!(*= $group *)!!
    !!(* } *)!!

    <Directory "/data/vhost/!!(*= $vhost *)!!/docs">
        Options +ExecCGI
        AllowOverride All
        !!(*= $cgihandler *)!!
        AddType application/x-httpd-fastphp .php
        !!(* if ("$debian_version" ne "sarge")  {*)!!
        Action application/x-httpd-fastphp /fcgi/php-basic
        !!(* } else { *)!!
        Action application/x-httpd-fastphp /fcgi/php-bitter
        !!(* } *)!!
    </Directory>

    # In Apache2, this goes outside the <Directory> directive
    !!(* foreach my $conf_dir (@$conf_dirs) { *)!!
        Include /data/vhost/!!(*= $vhost *)!!/!!(*= $vcspath *)!!/!!(*= $conf_dir *)!!/httpd.conf
    !!(* } *)!!
    !!(* foreach my $conf_dir (@$private_conf_dirs) { *)!!
        Include /data/vhost/!!(*= $vhost *)!!/!!(*= $vcspath *)!!/!!(*= $conf_dir *)!!/httpd.conf
    !!(* } *)!!
    # Make a file down.html in the DocumentRoot bring down the whole site and
    # display itself.
    RewriteEngine on
    ErrorDocument 503 /down.html
    Redirect 503 /down
    RewriteCond %{DOCUMENT_ROOT}/down.html -s
    RewriteRule /(.+).cgi /down [PT]
    RewriteCond %{DOCUMENT_ROOT}/down.html -s
    RewriteRule /(.+).php /down [PT]
    # next one mainly for Rails type sites - anything without a . can go down
    # XXX could we just check that it is an HTML content-type?
    #RewriteCond %{DOCUMENT_ROOT}/down.html -s
    #RewriteRule /([^.]*)$ /down.html [R]

    Alias /jslib/ "/data/vhost/!!(*= $vhost *)!!/!!(*= $vcspath . ($cvs ? '' : '/commonlib') *)!!/jslib/"
    <Directory "/data/vhost/!!(*= $vhost *)!!/!!(*= $vcspath . ($cvs ? '' : '/commonlib') *)!!/jslib">
        Options +ExecCGI
        !!(*= $cgihandler *)!!
        AddType application/x-httpd-fastphp .php
        !!(* if ("$debian_version" ne "sarge")  {*)!!
        Action application/x-httpd-fastphp /fcgi/php-basic
        !!(* } else { *)!!
        Action application/x-httpd-fastphp /fcgi/php-bitter
        !!(* } *)!!
    </Directory>

    !!(* foreach my $public_dir (@$public_dirs) { *)!!
    Alias /!!(*= $public_dir *)!!/ "/data/vhost/!!(*= $vhost *)!!/!!(*= $public_dir *)!!/"!!(* } *)!!

    ##########################################################################
    # Site specific stanzas

    !!(* if ($site eq 'theyworkforyou') { *)!!
    Alias /pwdata /home/twfy-live/parldata
    Alias /icons /usr/share/apache/icons
    <Directory "/home/twfy-live/parldata">
        Options +Indexes
    </Directory>
    !!(* } *)!!

    !!(* if ($site eq "writetothem" && !$staging) { *)!!
    # TODO: probably configure this via vhosts.pl, maybe generalising
    # internal_access_only somehow?
    <Location /services>
        AuthType Basic
        AuthName "WriteToThem queue service"
        AuthUserFile /etc/apache/rabx-htpasswd
        Require user fyr
    </Location>
    !!(* } *)!!

    !!(* if ($vhost eq "testharness.pet.mysociety.org") { *)!!
    # Petitions testharness behind authentication 1) as a hack
    # to stop squid caching it, and 2) to stop bots crawling
    # it and confusing the test script. Really should turn
    # off caching for that site another way (maybe in squid config,
    # or using config variable in the app like in PledgeBank), and
    # should stop bots with IP address limitation? Hmm, latter not
    # much good for browsing the testharness site from desktop machines.
    <Directory "/data/vhost/!!(*= $vhost *)!!/docs">
        AuthType Basic
        AuthName "ePetitions staging site"
        AuthUserFile /etc/apache/pet-htpasswd
        Require valid-user
    </Directory>
    !!(* } *)!!

</VirtualHost>

!!(* if ($https) {*)!!
    # Redirect from accessing HTTP at same vhost to HTTPS
    <VirtualHost *:80>
        ServerName !!(*= $vhost *)!!
        SSLEngine off
        RedirectPermanent / https://!!(*= $vhost *)!!/
    </VirtualHost>
!!(* } *)!!
